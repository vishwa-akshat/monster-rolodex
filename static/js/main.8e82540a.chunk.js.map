{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,aCHTC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAACN,GAAD,OACjB,cAAC,EAAD,CAA0BA,QAAWA,GAAxBA,EAAQO,YCNtBC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIb,UAAY,SACZc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCHG,G,wDArCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACVd,SAAW,GACXW,YAAa,IALL,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACV,SAAUmB,S,+BAOhC,IAAD,EAC4BC,KAAKN,MAA/Bd,EADF,EACEA,SAAUW,EADZ,EACYA,YACZU,EAAkBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC7CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CACAY,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUL,SAAWqB,W,GAhCTI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8e82540a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) =>(\r\n    <div className='card-container'>\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n    <h2 >{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\n\r\nimport './card-list.component.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className='card-list'>\r\n        {\r\n            props.monsters.map((monster) => (\r\n              <Card key = {monster.key} monster = {monster}/>\r\n              ))\r\n          }\r\n        </div>\r\n        )\r\n}","import React  from \"react\";\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n    <input\r\n        className = \"search\" \r\n        type=\"search\" \r\n        placeholder={placeholder} \r\n        onChange={handleChange} \r\n    />\r\n)","import React, {Component } from 'react';\n// import logo from './logo.svg';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n       monsters : [],\n       searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=> this.setState({monsters: users}));\n  }\n\n  handleChange = e =>{\n    this.setState({searchField: e.target.value});\n  };\n\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonster = monsters.filter(monster => (\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ));\n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox \n      placeholder=\"search monsters\" \n      handleChange={this.handleChange}\n      />\n      <CardList monsters= {filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}